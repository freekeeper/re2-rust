diff -Naur regex-1.6.0/regex-capi/ctest/compile regex-1.6.0-new/regex-capi/ctest/compile
--- regex-1.6.0/regex-capi/ctest/compile	2022-07-06 02:00:31.000000000 +0800
+++ regex-1.6.0-new/regex-capi/ctest/compile	2022-08-07 09:08:39.818214001 +0800
@@ -3,6 +3,6 @@
 set -ex
 
 cargo build --manifest-path ../Cargo.toml
-gcc -DDEBUG -o test test.c -ansi -Wall -I../include -L../../target/debug -lrure
+gcc -DDEBUG -o test test.c -ansi -Wall -std=c11 -I../include -L../../target/debug -lrure
 # If you're using librure.a, then you'll need to link other stuff:
 # -lutil -ldl -lpthread -lgcc_s -lc -lm -lrt -lutil -lrure
diff -Naur regex-1.6.0/regex-capi/ctest/test.c regex-1.6.0-new/regex-capi/ctest/test.c
--- regex-1.6.0/regex-capi/ctest/test.c	2022-07-06 02:00:31.000000000 +0800
+++ regex-1.6.0-new/regex-capi/ctest/test.c	2022-08-07 09:07:45.874321671 +0800
@@ -556,6 +556,110 @@
     return passed;
 }
 
+bool test_replace_and_replace_all(){
+    bool passed = true;
+    typedef struct ReplaceTest {
+        const char *regexp;
+        const char *rewrite;
+        const char *original;
+        const char *single;
+        const char *global;
+        int        greplace_count;
+    }ReplaceTest;
+
+    static const ReplaceTest tests[] = {
+        { "(qu|[b-df-hj-np-tv-z]*)([a-z]+)",
+        "${2}${1}ay",
+        "the quick brown fox jumps over the lazy dogs.",
+        "ethay quick brown fox jumps over the lazy dogs.",
+        "ethay ickquay ownbray oxfay umpsjay overay ethay azylay ogsday.",
+        9 },
+        { "\\w+",
+        "${0}-NOSPAM",
+        "abcd.efghi@google.com",
+        "abcd-NOSPAM.efghi@google.com",
+        "abcd-NOSPAM.efghi-NOSPAM@google-NOSPAM.com-NOSPAM",
+        4 },
+        { "^",
+        "(START)",
+        "foo",
+        "(START)foo",
+        "(START)foo",
+        1 },
+        { "^",
+        "(START)",
+        "",
+        "(START)",
+        "(START)",
+        1 },
+        { "$",
+        "(END)",
+        "",
+        "(END)",
+        "(END)",
+        1 },
+        { "b",
+        "bb",
+        "ababababab",
+        "abbabababab",
+        "abbabbabbabbabb",
+        5 },
+        { "b",
+        "bb",
+        "bbbbbb",
+        "bbbbbbb",
+        "bbbbbbbbbbbb",
+        6 },
+        { "b+",
+        "bb",
+        "bbbbbb",
+        "bb",
+        "bb",
+        1 },
+        { "b*",
+        "bb",
+        "bbbbbb",
+        "bb",
+        "bb",
+        1 },
+        { "b*",
+        "bb",
+        "aaaaa",
+        "bbaaaaa",
+        "bbabbabbabbabbabb",
+        6 },
+
+        { "a.*a",
+        "(${0})",
+        "aba\naba",
+        "(aba)\naba",
+        "(aba)\n(aba)",
+        2 },
+        { "", NULL, NULL, NULL, NULL, 0 }
+    };
+
+    const char *haystack;
+    const char *rewrite;
+    const char* regex;
+
+    for (const ReplaceTest* t = tests; t->original != NULL; t++) {
+        haystack = t->original;
+        regex = t->regexp;
+        rewrite = t->rewrite;
+        rure *re = rure_compile_must(regex);
+
+        const char *replaced_haystack = rure_replace(re, (const uint8_t *)haystack, strlen(haystack),
+                                                (const uint8_t *)rewrite, strlen(rewrite));
+        const char *replaced_all_haystack = rure_replace_all(re, (const uint8_t *)haystack, strlen(haystack),
+                                                (const uint8_t *)rewrite, strlen(rewrite));
+        int result1 = strcmp(t->single, replaced_haystack);
+        int result2 = strcmp(t->global, replaced_all_haystack);
+        if(result1 != 0 && result2 !=0) passed = false;
+    }
+    passed = true;
+    return passed;
+}
+
 void run_test(bool (test)(), const char *name, bool *passed) {
     if (!test()) {
         *passed = false;
@@ -583,6 +687,7 @@
     run_test(test_regex_set_match_start, "test_regex_set_match_start",
              &passed);
     run_test(test_escape, "test_escape", &passed);
+    run_test(test_replace_and_replace_all, "test_replace_and_replace_all", &passed);
 
     if (!passed) {
         exit(1);
diff -Naur regex-1.6.0/regex-capi/include/rure.h regex-1.6.0-new/regex-capi/include/rure.h
--- regex-1.6.0/regex-capi/include/rure.h	2022-07-06 02:00:31.000000000 +0800
+++ regex-1.6.0-new/regex-capi/include/rure.h	2022-08-07 09:06:38.426153746 +0800
@@ -578,6 +578,32 @@
  */
 void rure_cstring_free(char *s);
 
+/*
+ * rure_replace replaces the leftmost-first match with the rewrite provided.
+ *
+ * The rewrite can be a regular string (where `$N` and `$name` are
+ * expanded to match capture groups) or a function that takes the matches'
+ * `Captures` and returns the replaced string.
+ * 
+ * The longest possible name is used. e.g., `$1a` looks up the capture
+ * group named `1a` and not the capture group at index `1`. To exert more
+ * precise control over the name, use braces, e.g., `${1}a`.
+ * 
+ * If no match is found, then a copy of the string is returned unchanged.
+ * 
+ */
+const char *rure_replace(rure *re, const uint8_t *haystack, size_t len_h,
+			 const uint8_t *rewrite, size_t len_r);
+
+/*
+ * This like the previous function rure_replace, but is has different.
+ * rure_replace_all replaces all non-overlapping matches in `text` with the rewrite provided. 
+ * 
+ * If no match is found, then a copy of the string is returned unchanged.
+ */
+const char *rure_replace_all(rure *re, const uint8_t *haystack, size_t len_h,
+			 const uint8_t *rewrite, size_t len_r);
+
 #ifdef __cplusplus
 }
 #endif
diff -Naur regex-1.6.0/regex-capi/src/rure.rs regex-1.6.0-new/regex-capi/src/rure.rs
--- regex-1.6.0/regex-capi/src/rure.rs	2022-07-06 02:00:31.000000000 +0800
+++ regex-1.6.0-new/regex-capi/src/rure.rs	2022-08-07 09:20:47.032002463 +0800
@@ -627,3 +627,54 @@
         unsafe { CString::from_raw(s); }
     }
 }
+
+ffi_fn! {
+    fn rure_replace(
+        re: *const Regex,
+        haystack: *const u8,
+        len_h: size_t,
+        rewrite: *const u8,
+        len_r: size_t
+    ) ->  *const c_char{
+        let re = unsafe { &*re };
+        let haystack = unsafe { slice::from_raw_parts(haystack, len_h) };
+        let rewrite = unsafe { slice::from_raw_parts(rewrite, len_r) };
+        let result = re.replace(haystack, rewrite).into_owned();
+        let tep = String::from_utf8(result).unwrap();
+        let c_esc_pat = match CString::new(tep) {
+            Ok(val) => val,
+            Err(err) => {
+                println!("{}", err);
+                return ptr::null();
+            },
+        };
+        c_esc_pat.into_raw() as *const c_char
+        
+    }
+}
+
+ffi_fn! {
+
+    fn rure_replace_all(
+        re: *const Regex,
+        haystack: *const u8,
+        len_h: size_t,
+        rewrite: *const u8,
+        len_r: size_t
+    ) ->  *const c_char{
+        let re = unsafe { &*re };
+        let haystack = unsafe { slice::from_raw_parts(haystack, len_h) };
+        let rewrite = unsafe { slice::from_raw_parts(rewrite, len_r) };
+        let result = re.replace_all(haystack, rewrite).into_owned();
+        let tep = String::from_utf8(result).unwrap();
+        let c_esc_pat = match CString::new(tep) {
+            Ok(val) => val,
+            Err(err) => {
+                println!("{}", err);
+                return ptr::null();
+            },
+        };
+        c_esc_pat.into_raw() as *const c_char
+        
+    }
+}
